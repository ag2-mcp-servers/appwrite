# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:52:25+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class FieldPermissions(BaseModel):
    pass


class Continent(BaseModel):
    code: str = Field(..., description='Continent two letter code.')
    name: str = Field(..., description='Continent name.')


class ContinentList(BaseModel):
    continents: List[Continent] = Field(..., description='List of continents.')
    sum: int = Field(..., description='Total sum of items in the list.')


class Country(BaseModel):
    code: str = Field(..., description='Country two-character ISO 3166-1 alpha code.')
    name: str = Field(..., description='Country name.')


class CountryList(BaseModel):
    countries: List[Country] = Field(..., description='List of countries.')
    sum: int = Field(..., description='Total sum of items in the list.')


class Currency(BaseModel):
    code: str = Field(
        ...,
        description='Currency code in [ISO 4217-1](http://en.wikipedia.org/wiki/ISO_4217) three-character format.',
    )
    decimalDigits: int = Field(..., description='Number of decimal digits.')
    name: str = Field(..., description='Currency name.')
    namePlural: str = Field(..., description='Currency plural name')
    rounding: float = Field(..., description='Currency digit rounding.')
    symbol: str = Field(..., description='Currency symbol.')
    symbolNative: str = Field(..., description='Currency native symbol.')


class CurrencyList(BaseModel):
    currencies: List[Currency] = Field(..., description='List of currencies.')
    sum: int = Field(..., description='Total sum of items in the list.')


class Error(BaseModel):
    code: str = Field(..., description='Error code.')
    message: str = Field(..., description='Error message.')
    version: str = Field(..., description='Server version number.')


class Execution(BaseModel):
    field_id: str = Field(..., alias='$id', description='Execution ID.')
    dateCreated: int = Field(
        ..., description='The execution creation date in Unix timestamp.'
    )
    exitCode: int = Field(..., description='The script exit code.')
    functionId: str = Field(..., description='Function ID.')
    status: str = Field(
        ...,
        description='The status of the function execution. Possible values can be: `waiting`, `processing`, `completed`, or `failed`.',
    )
    stderr: str = Field(
        ...,
        description='The script stderr output string. Logs the last 4,000 characters of the execution stderr output',
    )
    stdout: str = Field(
        ...,
        description='The script stdout output string. Logs the last 4,000 characters of the execution stdout output.',
    )
    time: float = Field(..., description='The script execution time in seconds.')
    trigger: str = Field(
        ...,
        description='The trigger that caused the function to execute. Possible values can be: `http`, `schedule`, or `event`.',
    )


class ExecutionList(BaseModel):
    executions: List[Execution] = Field(..., description='List of executions.')
    sum: int = Field(..., description='Total sum of items in the list.')


class Language(BaseModel):
    code: str = Field(..., description='Language two-character ISO 639-1 codes.')
    name: str = Field(..., description='Language name.')
    nativeName: str = Field(..., description='Language native name.')


class LanguageList(BaseModel):
    languages: List[Language] = Field(..., description='List of languages.')
    sum: int = Field(..., description='Total sum of items in the list.')


class Locale(BaseModel):
    continent: str = Field(
        ..., description='Continent name. This field support localization.'
    )
    continentCode: str = Field(
        ...,
        description='Continent code. A two character continent code "AF" for Africa, "AN" for Antarctica, "AS" for Asia, "EU" for Europe, "NA" for North America, "OC" for Oceania, and "SA" for South America.',
    )
    country: str = Field(
        ..., description='Country name. This field support localization.'
    )
    countryCode: str = Field(
        ...,
        description='Country code in [ISO 3166-1](http://en.wikipedia.org/wiki/ISO_3166-1) two-character format',
    )
    currency: str = Field(
        ...,
        description='Currency code in [ISO 4217-1](http://en.wikipedia.org/wiki/ISO_4217) three-character format',
    )
    eu: bool = Field(..., description='True if country is part of the Europian Union.')
    ip: str = Field(..., description='User IP address.')


class Log(BaseModel):
    clientCode: str = Field(
        ...,
        description='Client code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/clients.json).',
    )
    clientEngine: str = Field(..., description='Client engine name.')
    clientEngineVersion: str = Field(..., description='Client engine name.')
    clientName: str = Field(..., description='Client name.')
    clientType: str = Field(..., description='Client type.')
    clientVersion: str = Field(..., description='Client version.')
    countryCode: str = Field(
        ..., description='Country two-character ISO 3166-1 alpha code.'
    )
    countryName: str = Field(..., description='Country name.')
    deviceBrand: str = Field(..., description='Device brand name.')
    deviceModel: str = Field(..., description='Device model name.')
    deviceName: str = Field(..., description='Device name.')
    event: str = Field(..., description='Event name.')
    ip: str = Field(..., description='IP session in use when the session was created.')
    osCode: str = Field(
        ...,
        description='Operating system code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/os.json).',
    )
    osName: str = Field(..., description='Operating system name.')
    osVersion: str = Field(..., description='Operating system version.')
    time: int = Field(..., description='Log creation time in Unix timestamp.')


class LogList(BaseModel):
    logs: List[Log] = Field(..., description='List of logs.')


class Membership(BaseModel):
    field_id: str = Field(..., alias='$id', description='Membership ID.')
    confirm: bool = Field(
        ...,
        description='User confirmation status, true if the user has joined the team or false otherwise.',
    )
    email: str = Field(..., description='User email address.')
    invited: int = Field(
        ...,
        description='Date, the user has been invited to join the team in Unix timestamp.',
    )
    joined: int = Field(
        ...,
        description='Date, the user has accepted the invitation to join the team in Unix timestamp.',
    )
    name: str = Field(..., description='User name.')
    roles: List[str] = Field(..., description='User list of roles')
    teamId: str = Field(..., description='Team ID.')
    userId: str = Field(..., description='User ID.')


class MembershipList(BaseModel):
    memberships: List[Membership] = Field(..., description='List of memberships.')
    sum: int = Field(..., description='Total sum of items in the list.')


class Permissions(BaseModel):
    read: List[str] = Field(..., description='Read permissions.')
    write: List[str] = Field(..., description='Write permissions.')


class Phone(BaseModel):
    code: str = Field(..., description='Phone code.')
    countryCode: str = Field(
        ..., description='Country two-character ISO 3166-1 alpha code.'
    )
    countryName: str = Field(..., description='Country name.')


class PhoneList(BaseModel):
    phones: List[Phone] = Field(..., description='List of phones.')
    sum: int = Field(..., description='Total sum of items in the list.')


class Preferences(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class Rule(BaseModel):
    field_collection: str = Field(
        ..., alias='$collection', description='Rule Collection.'
    )
    field_id: str = Field(..., alias='$id', description='Rule ID.')
    array: bool = Field(..., description='Is array?')
    default: str = Field(..., description='Rule default value.')
    key: str = Field(..., description='Rule key.')
    label: str = Field(..., description='Rule label.')
    list: List[str] = Field(..., description='List of allowed values')
    required: bool = Field(..., description='Is required?')
    type: str = Field(..., description='Rule type. Possible values: ')


class Session(BaseModel):
    field_id: str = Field(..., alias='$id', description='Session ID.')
    clientCode: str = Field(
        ...,
        description='Client code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/clients.json).',
    )
    clientEngine: str = Field(..., description='Client engine name.')
    clientEngineVersion: str = Field(..., description='Client engine name.')
    clientName: str = Field(..., description='Client name.')
    clientType: str = Field(..., description='Client type.')
    clientVersion: str = Field(..., description='Client version.')
    countryCode: str = Field(
        ..., description='Country two-character ISO 3166-1 alpha code.'
    )
    countryName: str = Field(..., description='Country name.')
    current: bool = Field(
        ..., description='Returns true if this the current user session.'
    )
    deviceBrand: str = Field(..., description='Device brand name.')
    deviceModel: str = Field(..., description='Device model name.')
    deviceName: str = Field(..., description='Device name.')
    expire: int = Field(..., description='Session expiration date in Unix timestamp.')
    ip: str = Field(..., description='IP in use when the session was created.')
    osCode: str = Field(
        ...,
        description='Operating system code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/os.json).',
    )
    osName: str = Field(..., description='Operating system name.')
    osVersion: str = Field(..., description='Operating system version.')
    provider: str = Field(..., description='Session Provider.')
    providerToken: str = Field(..., description='Session Provider Token.')
    providerUid: str = Field(..., description='Session Provider User ID.')
    userId: str = Field(..., description='User ID.')


class SessionList(BaseModel):
    sessions: List[Session] = Field(..., description='List of sessions.')
    sum: int = Field(..., description='Total sum of items in the list.')


class Tag(BaseModel):
    field_id: str = Field(..., alias='$id', description='Tag ID.')
    command: str = Field(
        ..., description='The entrypoint command in use to execute the tag code.'
    )
    dateCreated: int = Field(
        ..., description='The tag creation date in Unix timestamp.'
    )
    functionId: str = Field(..., description='Function ID.')
    size: str = Field(..., description='The code size in bytes.')


class TagList(BaseModel):
    sum: int = Field(..., description='Total sum of items in the list.')
    tags: List[Tag] = Field(..., description='List of tags.')


class Team(BaseModel):
    field_id: str = Field(..., alias='$id', description='Team ID.')
    dateCreated: int = Field(..., description='Team creation date in Unix timestamp.')
    name: str = Field(..., description='Team name.')
    sum: int = Field(..., description='Total sum of team members.')


class TeamList(BaseModel):
    sum: int = Field(..., description='Total sum of items in the list.')
    teams: List[Team] = Field(..., description='List of teams.')


class Token(BaseModel):
    field_id: str = Field(..., alias='$id', description='Token ID.')
    expire: int = Field(..., description='Token expiration date in Unix timestamp.')
    secret: str = Field(
        ...,
        description='Token secret key. This will return an empty string unless the response is returned using an API key or as part of a webhook payload.',
    )
    userId: str = Field(..., description='User ID.')


class Prefs(BaseModel):
    pass


class User(BaseModel):
    field_id: str = Field(..., alias='$id', description='User ID.')
    email: str = Field(..., description='User email address.')
    emailVerification: bool = Field(..., description='Email verification status.')
    name: str = Field(..., description='User name.')
    passwordUpdate: int = Field(
        ..., description='Unix timestamp of the most recent password update'
    )
    prefs: Union[List[Preferences], Prefs] = Field(
        ..., description='User preferences as a key-value object'
    )
    registration: int = Field(
        ..., description='User registration date in Unix timestamp.'
    )
    status: int = Field(
        ...,
        description='User status. 0 for Unactivated, 1 for active and 2 is blocked.',
    )


class UserList(BaseModel):
    sum: int = Field(..., description='Total sum of items in the list.')
    users: List[User] = Field(..., description='List of users.')


class AccountEmailPatchRequest(BaseModel):
    email: str = Field(..., description='User email.')
    password: str = Field(
        ..., description='User password. Must be between 6 to 32 chars.'
    )


class AccountNamePatchRequest(BaseModel):
    name: str = Field(..., description='User name. Max length: 128 chars.')


class AccountPasswordPatchRequest(BaseModel):
    oldPassword: Optional[str] = Field(
        None, description='Old user password. Must be between 6 to 32 chars.'
    )
    password: str = Field(
        ..., description='New user password. Must be between 6 to 32 chars.'
    )


class AccountPrefsPatchRequest(BaseModel):
    prefs: Dict[str, Any] = Field(..., description='Prefs key-value JSON object.')


class AccountRecoveryPostRequest(BaseModel):
    email: str = Field(..., description='User email.')
    url: str = Field(
        ...,
        description='URL to redirect the user back to your app from the recovery email. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.',
    )


class AccountRecoveryPutRequest(BaseModel):
    password: str = Field(
        ..., description='New password. Must be between 6 to 32 chars.'
    )
    passwordAgain: str = Field(
        ..., description='New password again. Must be between 6 to 32 chars.'
    )
    secret: str = Field(..., description='Valid reset token.')
    userId: str = Field(..., description='User account UID address.')


class AccountVerificationPostRequest(BaseModel):
    url: str = Field(
        ...,
        description='URL to redirect the user back to your app from the verification email. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.',
    )


class AccountVerificationPutRequest(BaseModel):
    secret: str = Field(..., description='Valid verification token.')
    userId: str = Field(..., description='User unique ID.')


class DatabaseCollectionsPostRequest(BaseModel):
    name: str = Field(..., description='Collection name. Max length: 128 chars.')
    read: List[str] = Field(
        ...,
        description='An array of strings with read permissions. By default no user is granted with any read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.',
    )
    rules: List[str] = Field(
        ...,
        description='Array of [rule objects](/docs/rules). Each rule define a collection field name, data type and validation.',
    )
    write: List[str] = Field(
        ...,
        description='An array of strings with write permissions. By default no user is granted with any write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.',
    )


class DatabaseCollectionsCollectionIdPutRequest(BaseModel):
    name: str = Field(..., description='Collection name. Max length: 128 chars.')
    read: Optional[List[str]] = Field(
        None,
        description='An array of strings with read permissions. By default inherits the existing read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.',
    )
    rules: Optional[List[str]] = Field(
        None,
        description='Array of [rule objects](/docs/rules). Each rule define a collection field name, data type and validation.',
    )
    write: Optional[List[str]] = Field(
        None,
        description='An array of strings with write permissions. By default inherits the existing write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.',
    )


class Filters(RootModel[List[str]]):
    root: List[str]


class DatabaseCollectionsCollectionIdDocumentsPostRequest(BaseModel):
    data: Dict[str, Any] = Field(..., description='Document data as JSON object.')
    parentDocument: Optional[str] = Field(
        None,
        description='Parent document unique ID. Use when you want your new document to be a child of a parent document.',
    )
    parentProperty: Optional[str] = Field(
        None,
        description='Parent document property name. Use when you want your new document to be a child of a parent document.',
    )
    parentPropertyType: Optional[str] = Field(
        None,
        description='Parent document property connection type. You can set this value to **assign**, **append** or **prepend**, default value is assign. Use when you want your new document to be a child of a parent document.',
    )
    read: Optional[List[str]] = Field(
        None,
        description='An array of strings with read permissions. By default only the current user is granted with read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.',
    )
    write: Optional[List[str]] = Field(
        None,
        description='An array of strings with write permissions. By default only the current user is granted with write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.',
    )


class DatabaseCollectionsCollectionIdDocumentsDocumentIdPatchRequest(BaseModel):
    data: Dict[str, Any] = Field(..., description='Document data as JSON object.')
    read: Optional[List[str]] = Field(
        None,
        description='An array of strings with read permissions. By default inherits the existing read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.',
    )
    write: Optional[List[str]] = Field(
        None,
        description='An array of strings with write permissions. By default inherits the existing write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.',
    )


class FunctionsPostRequest(BaseModel):
    events: Optional[List[str]] = Field(None, description='Events list.')
    execute: List[str] = Field(
        ...,
        description='An array of strings with execution permissions. By default no user is granted with any execute permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.',
    )
    name: str = Field(..., description='Function name. Max length: 128 chars.')
    runtime: str = Field(..., description='Execution runtime.')
    schedule: Optional[str] = Field(None, description='Schedule CRON syntax.')
    timeout: Optional[int] = Field(
        None, description='Function maximum execution time in seconds.'
    )
    vars: Optional[Dict[str, Any]] = Field(None, description='Key-value JSON object.')


class FunctionsFunctionIdPutRequest(BaseModel):
    events: Optional[List[str]] = Field(None, description='Events list.')
    execute: List[str] = Field(
        ...,
        description='An array of strings with execution permissions. By default no user is granted with any execute permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.',
    )
    name: str = Field(..., description='Function name. Max length: 128 chars.')
    schedule: Optional[str] = Field(None, description='Schedule CRON syntax.')
    timeout: Optional[int] = Field(
        None, description='Function maximum execution time in seconds.'
    )
    vars: Optional[Dict[str, Any]] = Field(None, description='Key-value JSON object.')


class FunctionsFunctionIdExecutionsPostRequest(BaseModel):
    data: Optional[str] = Field(
        None, description='String of custom data to send to function.'
    )


class FunctionsFunctionIdTagPatchRequest(BaseModel):
    tag: str = Field(..., description='Tag unique ID.')


class FunctionsFunctionIdTagsPostRequest(BaseModel):
    code: str = Field(
        ...,
        description='Gzip file with your code package. When used with the Appwrite CLI, pass the path to your code directory, and the CLI will automatically package your code. Use a path that is within the current directory.',
    )
    command: str = Field(..., description='Code execution command.')


class StorageFilesPostRequest(BaseModel):
    file: str = Field(..., description='Binary file.')
    read: Optional[List[str]] = Field(
        None,
        description='An array of strings with read permissions. By default only the current user is granted with read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.',
    )
    write: Optional[List[str]] = Field(
        None,
        description='An array of strings with write permissions. By default only the current user is granted with write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.',
    )


class StorageFilesFileIdPutRequest(BaseModel):
    read: List[str] = Field(
        ...,
        description='An array of strings with read permissions. By default no user is granted with any read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.',
    )
    write: List[str] = Field(
        ...,
        description='An array of strings with write permissions. By default no user is granted with any write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.',
    )


class TeamsPostRequest(BaseModel):
    name: str = Field(..., description='Team name. Max length: 128 chars.')
    roles: Optional[List[str]] = Field(
        None,
        description='Array of strings. Use this param to set the roles in the team for the user who created it. The default role is **owner**. A role can be any string. Learn more about [roles and permissions](/docs/permissions). Max length for each role is 32 chars.',
    )


class TeamsTeamIdPutRequest(BaseModel):
    name: str = Field(..., description='Team name. Max length: 128 chars.')


class TeamsTeamIdMembershipsPostRequest(BaseModel):
    email: str = Field(..., description='New team member email.')
    name: Optional[str] = Field(
        None, description='New team member name. Max length: 128 chars.'
    )
    roles: List[str] = Field(
        ...,
        description='Array of strings. Use this param to set the user roles in the team. A role can be any string. Learn more about [roles and permissions](/docs/permissions). Max length for each role is 32 chars.',
    )
    url: str = Field(
        ...,
        description='URL to redirect the user back to your app from the invitation email.  Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.',
    )


class TeamsTeamIdMembershipsMembershipIdPatchRequest(BaseModel):
    roles: List[str] = Field(
        ...,
        description='Array of strings. Use this param to set the user roles in the team. A role can be any string. Learn more about [roles and permissions](/docs/permissions). Max length for each role is 32 chars.',
    )


class TeamsTeamIdMembershipsMembershipIdStatusPatchRequest(BaseModel):
    secret: str = Field(..., description='Secret key.')
    userId: str = Field(..., description='User unique ID.')


class UsersPostRequest(BaseModel):
    email: str = Field(..., description='User email.')
    name: Optional[str] = Field(None, description='User name. Max length: 128 chars.')
    password: str = Field(
        ..., description='User password. Must be between 6 to 32 chars.'
    )


class UsersUserIdPrefsPatchRequest(BaseModel):
    prefs: Dict[str, Any] = Field(..., description='Prefs key-value JSON object.')


class UsersUserIdStatusPatchRequest(BaseModel):
    status: int = Field(
        ...,
        description='User Status code. To activate the user pass 1, to block the user pass 2 and for disabling the user pass 0',
    )


class UsersUserIdVerificationPatchRequest(BaseModel):
    emailVerification: bool = Field(..., description='User Email Verification Status.')


class Collection(BaseModel):
    field_id: str = Field(..., alias='$id', description='Collection ID.')
    field_permissions: Union[List[Permissions], FieldPermissions] = Field(
        ..., alias='$permissions', description='Collection permissions.'
    )
    dateCreated: int = Field(
        ..., description='Collection creation date in Unix timestamp.'
    )
    dateUpdated: int = Field(
        ..., description='Collection creation date in Unix timestamp.'
    )
    name: str = Field(..., description='Collection name.')
    rules: List[Rule] = Field(..., description='Collection rules.')


class CollectionList(BaseModel):
    collections: List[Collection] = Field(..., description='List of collections.')
    sum: int = Field(..., description='Total sum of items in the list.')


class Document(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_collection: str = Field(
        ..., alias='$collection', description='Collection ID.'
    )
    field_id: str = Field(..., alias='$id', description='Document ID.')
    field_permissions: Union[List[Permissions], FieldPermissions] = Field(
        ..., alias='$permissions', description='Document permissions.'
    )


class DocumentList(BaseModel):
    documents: List[Document] = Field(..., description='List of documents.')
    sum: int = Field(..., description='Total sum of items in the list.')


class File(BaseModel):
    field_id: str = Field(..., alias='$id', description='File ID.')
    field_permissions: Union[List[Permissions], FieldPermissions] = Field(
        ..., alias='$permissions', description='File permissions.'
    )
    dateCreated: int = Field(..., description='File creation date in Unix timestamp.')
    mimeType: str = Field(..., description='File mime type.')
    name: str = Field(..., description='File name.')
    signature: str = Field(..., description='File MD5 signature.')
    sizeOriginal: int = Field(..., description='File original size in bytes.')


class FileList(BaseModel):
    files: List[File] = Field(..., description='List of files.')
    sum: int = Field(..., description='Total sum of items in the list.')


class Function(BaseModel):
    field_id: str = Field(..., alias='$id', description='Function ID.')
    field_permissions: Union[List[Permissions], FieldPermissions] = Field(
        ..., alias='$permissions', description='Function permissions.'
    )
    dateCreated: int = Field(
        ..., description='Function creation date in Unix timestamp.'
    )
    dateUpdated: int = Field(..., description='Function update date in Unix timestamp.')
    events: List[str] = Field(..., description='Function trigger events.')
    name: str = Field(..., description='Function name.')
    runtime: str = Field(..., description='Function execution runtime.')
    schedule: str = Field(
        ..., description='Function execution schedult in CRON format.'
    )
    scheduleNext: int = Field(
        ..., description='Function next scheduled execution date in Unix timestamp.'
    )
    schedulePrevious: int = Field(
        ..., description='Function next scheduled execution date in Unix timestamp.'
    )
    status: str = Field(
        ..., description='Function status. Possible values: disabled, enabled'
    )
    tag: str = Field(..., description='Function active tag ID.')
    timeout: int = Field(..., description='Function execution timeout in seconds.')
    vars: str = Field(..., description='Function environment variables.')


class FunctionList(BaseModel):
    functions: List[Function] = Field(..., description='List of functions.')
    sum: int = Field(..., description='Total sum of items in the list.')
