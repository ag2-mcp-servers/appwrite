# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:52:25+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Path, Query, UploadFile

from models import (
    AccountEmailPatchRequest,
    AccountNamePatchRequest,
    AccountPasswordPatchRequest,
    AccountPrefsPatchRequest,
    AccountRecoveryPostRequest,
    AccountRecoveryPutRequest,
    AccountVerificationPostRequest,
    AccountVerificationPutRequest,
    Collection,
    CollectionList,
    ContinentList,
    CountryList,
    CurrencyList,
    DatabaseCollectionsCollectionIdDocumentsDocumentIdPatchRequest,
    DatabaseCollectionsCollectionIdDocumentsPostRequest,
    DatabaseCollectionsCollectionIdPutRequest,
    DatabaseCollectionsPostRequest,
    Document,
    DocumentList,
    Execution,
    ExecutionList,
    File,
    FileList,
    Filters,
    Function,
    FunctionList,
    FunctionsFunctionIdExecutionsPostRequest,
    FunctionsFunctionIdPutRequest,
    FunctionsFunctionIdTagPatchRequest,
    FunctionsPostRequest,
    LanguageList,
    Locale,
    LogList,
    Membership,
    MembershipList,
    PhoneList,
    Preferences,
    Session,
    SessionList,
    StorageFilesFileIdPutRequest,
    Tag,
    TagList,
    Team,
    TeamList,
    TeamsPostRequest,
    TeamsTeamIdMembershipsMembershipIdPatchRequest,
    TeamsTeamIdMembershipsMembershipIdStatusPatchRequest,
    TeamsTeamIdMembershipsPostRequest,
    TeamsTeamIdPutRequest,
    Token,
    User,
    UserList,
    UsersPostRequest,
    UsersUserIdPrefsPatchRequest,
    UsersUserIdStatusPatchRequest,
    UsersUserIdVerificationPatchRequest,
)

app = MCPProxy(
    contact={
        'email': 'team@appwrite.io',
        'name': 'Appwrite Team',
        'url': 'https://appwrite.io/support',
    },
    description='Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)',
    license={
        'name': 'BSD-3-Clause',
        'url': 'https://raw.githubusercontent.com/appwrite/appwrite/master/LICENSE',
    },
    termsOfService='https://appwrite.io/policy/terms',
    title='Appwrite',
    version='0.9.3',
    servers=[{'url': 'https://appwrite.io/v1'}],
)


@app.delete(
    '/account',
    description=""" Delete a currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. This is done to avoid deleted accounts being overtaken by new users with the same email address. Any user-related resources like documents or storage files should be deleted separately. """,
    tags=['account_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def account_delete():
    """
    Delete Account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account',
    description=""" Get currently logged in user data as JSON object. """,
    tags=['account_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def account_get():
    """
    Get Account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/account/email',
    description=""" Update currently logged in user account email address. After changing user address, user confirmation status is being reset and a new confirmation mail is sent. For security measures, user password is required to complete this request.
This endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password. """,
    tags=[
        'account_operations',
        'user_account_management',
        'user_verification_status_management',
    ],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def account_update_email(body: AccountEmailPatchRequest = None):
    """
    Update Account Email
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/logs',
    description=""" Get currently logged in user list of latest security activity logs. Each log returns user IP address, location and date and time of log. """,
    tags=['account_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def account_get_logs():
    """
    Get Account Logs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/account/name',
    description=""" Update currently logged in user account name. """,
    tags=['account_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def account_update_name(body: AccountNamePatchRequest = None):
    """
    Update Account Name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/account/password',
    description=""" Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth and Team Invites, oldPassword is optional. """,
    tags=['account_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def account_update_password(body: AccountPasswordPatchRequest = None):
    """
    Update Account Password
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/prefs',
    description=""" Get currently logged in user preferences as a key-value object. """,
    tags=['account_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def account_get_prefs():
    """
    Get Account Preferences
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/account/prefs',
    description=""" Update currently logged in user account preferences. You can pass only the specific settings you wish to update. """,
    tags=['account_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def account_update_prefs(body: AccountPrefsPatchRequest = None):
    """
    Update Account Preferences
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/recovery',
    description=""" Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](/docs/client/account#accountUpdateRecovery) endpoint to complete the process. The verification link sent to the user's email address is valid for 1 hour. """,
    tags=['account_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def account_create_recovery(body: AccountRecoveryPostRequest = None):
    """
    Create Password Recovery
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/recovery',
    description=""" Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](/docs/client/account#accountCreateRecovery) endpoint.

Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface. """,
    tags=['account_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def account_update_recovery(body: AccountRecoveryPutRequest = None):
    """
    Complete Password Recovery
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/sessions',
    description=""" Delete all sessions from the user account and remove any sessions cookies from the end client. """,
    tags=['session_handling', 'individual_session_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def account_delete_sessions():
    """
    Delete All Account Sessions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/sessions',
    description=""" Get currently logged in user list of active sessions across different devices. """,
    tags=['session_handling', 'individual_session_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def account_get_sessions():
    """
    Get Account Sessions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/sessions/{sessionId}',
    description=""" Use this endpoint to log out the currently logged in user from all their account sessions across all of their different devices. When using the option id argument, only the session unique ID provider will be deleted. """,
    tags=['session_handling', 'individual_session_management', 'account_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def account_delete_session(session_id: str = Path(..., alias='sessionId')):
    """
    Delete Account Session
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/sessions/{sessionId}',
    description=""" Use this endpoint to get a logged in user's session using a Session ID. Inputting 'current' will return the current session being used. """,
    tags=['session_handling', 'individual_session_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def account_get_session(session_id: str = Path(..., alias='sessionId')):
    """
    Get Session By ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/verification',
    description=""" Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](/docs/client/account#accountUpdateVerification). The verification link sent to the user's email address is valid for 7 days.

Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.
 """,
    tags=[
        'account_operations',
        'user_account_management',
        'user_verification_status_management',
    ],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def account_create_verification(body: AccountVerificationPostRequest = None):
    """
    Create Email Verification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/verification',
    description=""" Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code. """,
    tags=['account_operations', 'user_verification_status_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def account_update_verification(body: AccountVerificationPutRequest = None):
    """
    Complete Email Verification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/avatars/browsers/{code}',
    description=""" You can use this endpoint to show different browser icons to your users. The code argument receives the browser code as it appears in your user /account/sessions endpoint. Use width, height and quality arguments to change the output settings. """,
    tags=['avatar_retrieval'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def avatars_get_browser(
    code: str,
    width: Optional[int] = 100,
    height: Optional[int] = 100,
    quality: Optional[int] = 100,
):
    """
    Get Browser Icon
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/avatars/credit-cards/{code}',
    description=""" The credit card endpoint will return you the icon of the credit card provider you need. Use width, height and quality arguments to change the output settings. """,
    tags=['avatar_retrieval'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def avatars_get_credit_card(
    code: str,
    width: Optional[int] = 100,
    height: Optional[int] = 100,
    quality: Optional[int] = 100,
):
    """
    Get Credit Card Icon
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/avatars/favicon',
    description=""" Use this endpoint to fetch the favorite icon (AKA favicon) of any remote website URL.
 """,
    tags=['avatar_retrieval'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def avatars_get_favicon(url: str):
    """
    Get Favicon
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/avatars/flags/{code}',
    description=""" You can use this endpoint to show different country flags icons to your users. The code argument receives the 2 letter country code. Use width, height and quality arguments to change the output settings. """,
    tags=['avatar_retrieval', 'locale_data_access'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def avatars_get_flag(
    code: str,
    width: Optional[int] = 100,
    height: Optional[int] = 100,
    quality: Optional[int] = 100,
):
    """
    Get Country Flag
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/avatars/image',
    description=""" Use this endpoint to fetch a remote image URL and crop it to any image size you want. This endpoint is very useful if you need to crop and display remote images in your app or in case you want to make sure a 3rd party image is properly served using a TLS protocol. """,
    tags=['avatar_retrieval'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def avatars_get_image(
    url: str, width: Optional[int] = 400, height: Optional[int] = 400
):
    """
    Get Image from URL
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/avatars/initials',
    description=""" Use this endpoint to show your user initials avatar icon on your website or app. By default, this route will try to print your logged-in user name or email initials. You can also overwrite the user name if you pass the 'name' parameter. If no name is given and no user is logged, an empty avatar will be returned.

You can use the color and background params to change the avatar colors. By default, a random theme will be selected. The random theme will persist for the user's initials when reloading the same theme will always return for the same initials. """,
    tags=['avatar_retrieval', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def avatars_get_initials(
    name: Optional[str] = '',
    width: Optional[int] = 500,
    height: Optional[int] = 500,
    color: Optional[str] = '',
    background: Optional[str] = '',
):
    """
    Get User Initials
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/avatars/qr',
    description=""" Converts a given plain text to a QR code image. You can use the query parameters to change the size and style of the resulting image. """,
    tags=['avatar_retrieval'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def avatars_get_q_r(
    text: str,
    size: Optional[int] = 400,
    margin: Optional[int] = 1,
    download: Optional[bool] = False,
):
    """
    Get QR Code
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/database/collections',
    description=""" Get a list of all the user collections. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's collections. [Learn more about different API modes](/docs/admin). """,
    tags=['database_management', 'document_crud_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def database_list_collections(
    search: Optional[str] = '',
    limit: Optional[int] = 25,
    offset: Optional[int] = 0,
    order_type: Optional[str] = Query('ASC', alias='orderType'),
):
    """
    List Collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/database/collections',
    description=""" Create a new Collection. """,
    tags=['database_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def database_create_collection(body: DatabaseCollectionsPostRequest = None):
    """
    Create Collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/database/collections/{collectionId}',
    description=""" Delete a collection by its unique ID. Only users with write permissions have access to delete this resource. """,
    tags=['database_management', 'document_crud_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def database_delete_collection(collection_id: str = Path(..., alias='collectionId')):
    """
    Delete Collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/database/collections/{collectionId}',
    description=""" Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata. """,
    tags=['database_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def database_get_collection(collection_id: str = Path(..., alias='collectionId')):
    """
    Get Collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/database/collections/{collectionId}',
    description=""" Update a collection by its unique ID. """,
    tags=['database_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def database_update_collection(
    collection_id: str = Path(..., alias='collectionId'),
    body: DatabaseCollectionsCollectionIdPutRequest = None,
):
    """
    Update Collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/database/collections/{collectionId}/documents',
    description=""" Get a list of all the user documents. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's documents. [Learn more about different API modes](/docs/admin). """,
    tags=['database_management', 'document_crud_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def database_list_documents(
    collection_id: str = Path(..., alias='collectionId'),
    filters: Optional[Filters] = [],
    limit: Optional[int] = 25,
    offset: Optional[int] = 0,
    order_field: Optional[str] = Query('', alias='orderField'),
    order_type: Optional[str] = Query('ASC', alias='orderType'),
    order_cast: Optional[str] = Query('string', alias='orderCast'),
    search: Optional[str] = '',
):
    """
    List Documents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/database/collections/{collectionId}/documents',
    description=""" Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](/docs/server/database#databaseCreateCollection) API or directly from your database console. """,
    tags=['database_management', 'document_crud_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def database_create_document(
    collection_id: str = Path(..., alias='collectionId'),
    body: DatabaseCollectionsCollectionIdDocumentsPostRequest = None,
):
    """
    Create Document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/database/collections/{collectionId}/documents/{documentId}',
    description=""" Delete a document by its unique ID. This endpoint deletes only the parent documents, its attributes and relations to other documents. Child documents **will not** be deleted. """,
    tags=['database_management', 'document_crud_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def database_delete_document(
    collection_id: str = Path(..., alias='collectionId'),
    document_id: str = Path(..., alias='documentId'),
):
    """
    Delete Document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/database/collections/{collectionId}/documents/{documentId}',
    description=""" Get a document by its unique ID. This endpoint response returns a JSON object with the document data. """,
    tags=['database_management', 'document_crud_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def database_get_document(
    collection_id: str = Path(..., alias='collectionId'),
    document_id: str = Path(..., alias='documentId'),
):
    """
    Get Document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/database/collections/{collectionId}/documents/{documentId}',
    description=""" Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated. """,
    tags=['database_management', 'document_crud_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def database_update_document(
    collection_id: str = Path(..., alias='collectionId'),
    document_id: str = Path(..., alias='documentId'),
    body: DatabaseCollectionsCollectionIdDocumentsDocumentIdPatchRequest = None,
):
    """
    Update Document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/functions',
    description=""" Get a list of all the project's functions. You can use the query params to filter your results. """,
    tags=['database_management', 'document_crud_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def functions_list(
    search: Optional[str] = '',
    limit: Optional[int] = 25,
    offset: Optional[int] = 0,
    order_type: Optional[str] = Query('ASC', alias='orderType'),
):
    """
    List Functions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/functions',
    description=""" Create a new function. You can pass a list of [permissions](/docs/permissions) to allow different project users or team with access to execute the function using the client API. """,
    tags=['custom_function_handling', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def functions_create(body: FunctionsPostRequest = None):
    """
    Create Function
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/functions/{functionId}',
    description=""" Delete a function by its unique ID. """,
    tags=['custom_function_handling', 'function_tagging_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def functions_delete(function_id: str = Path(..., alias='functionId')):
    """
    Delete Function
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/functions/{functionId}',
    description=""" Get a function by its unique ID. """,
    tags=['custom_function_handling', 'function_execution_tracking'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def functions_get(function_id: str = Path(..., alias='functionId')):
    """
    Get Function
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/functions/{functionId}',
    description=""" Update function by its unique ID. """,
    tags=['custom_function_handling', 'function_execution_tracking'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def functions_update(
    function_id: str = Path(..., alias='functionId'),
    body: FunctionsFunctionIdPutRequest = None,
):
    """
    Update Function
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/functions/{functionId}/executions',
    description=""" Get a list of all the current user function execution logs. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's executions. [Learn more about different API modes](/docs/admin). """,
    tags=['function_execution_tracking'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def functions_list_executions(
    function_id: str = Path(..., alias='functionId'),
    search: Optional[str] = '',
    limit: Optional[int] = 25,
    offset: Optional[int] = 0,
    order_type: Optional[str] = Query('ASC', alias='orderType'),
):
    """
    List Executions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/functions/{functionId}/executions',
    description=""" Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously. """,
    tags=['function_execution_tracking', 'custom_function_handling'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def functions_create_execution(
    function_id: str = Path(..., alias='functionId'),
    body: FunctionsFunctionIdExecutionsPostRequest = None,
):
    """
    Create Execution
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/functions/{functionId}/executions/{executionId}',
    description=""" Get a function execution log by its unique ID. """,
    tags=['function_execution_tracking'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def functions_get_execution(
    function_id: str = Path(..., alias='functionId'),
    execution_id: str = Path(..., alias='executionId'),
):
    """
    Get Execution
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/functions/{functionId}/tag',
    description=""" Update the function code tag ID using the unique function ID. Use this endpoint to switch the code tag that should be executed by the execution endpoint. """,
    tags=['function_tagging_operations', 'custom_function_handling'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def functions_update_tag(
    function_id: str = Path(..., alias='functionId'),
    body: FunctionsFunctionIdTagPatchRequest = None,
):
    """
    Update Function Tag
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/functions/{functionId}/tags',
    description=""" Get a list of all the project's code tags. You can use the query params to filter your results. """,
    tags=['function_tagging_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def functions_list_tags(
    function_id: str = Path(..., alias='functionId'),
    search: Optional[str] = '',
    limit: Optional[int] = 25,
    offset: Optional[int] = 0,
    order_type: Optional[str] = Query('ASC', alias='orderType'),
):
    """
    List Tags
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/functions/{functionId}/tags',
    description=""" Create a new function code tag. Use this endpoint to upload a new version of your code function. To execute your newly uploaded code, you'll need to update the function's tag to use your new tag UID.

This endpoint accepts a tar.gz file compressed with your code. Make sure to include any dependencies your code has within the compressed file. You can learn more about code packaging in the [Appwrite Cloud Functions tutorial](/docs/functions).

Use the "command" param to set the entry point used to execute your code. """,
    tags=['function_tagging_operations', 'custom_function_handling'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def functions_create_tag(
    function_id: str = Path(..., alias='functionId'), file: UploadFile = ...
):
    """
    Create Tag
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/functions/{functionId}/tags/{tagId}',
    description=""" Delete a code tag by its unique ID. """,
    tags=['function_tagging_operations', 'custom_function_handling'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def functions_delete_tag(
    function_id: str = Path(..., alias='functionId'),
    tag_id: str = Path(..., alias='tagId'),
):
    """
    Delete Tag
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/functions/{functionId}/tags/{tagId}',
    description=""" Get a code tag by its unique ID. """,
    tags=['function_tagging_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def functions_get_tag(
    function_id: str = Path(..., alias='functionId'),
    tag_id: str = Path(..., alias='tagId'),
):
    """
    Get Tag
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/health',
    description=""" Check the Appwrite HTTP server is up and responsive. """,
    tags=['user_account_management', 'session_handling'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def health_get():
    """
    Get HTTP
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/health/anti-virus',
    description=""" Check the Appwrite Anti Virus server is up and connection is successful. """,
    tags=['system_health_checks'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def health_get_anti_virus():
    """
    Get Anti virus
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/health/cache',
    description=""" Check the Appwrite in-memory cache server is up and connection is successful. """,
    tags=['system_health_checks'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def health_get_cache():
    """
    Get Cache
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/health/db',
    description=""" Check the Appwrite database server is up and connection is successful. """,
    tags=['database_management', 'document_crud_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def health_get_d_b():
    """
    Get DB
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/health/queue/certificates',
    description=""" Get the number of certificates that are waiting to be issued against [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue server. """,
    tags=['account_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def health_get_queue_certificates():
    """
    Get Certificate Queue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/health/queue/functions',
    tags=[
        'session_handling',
        'individual_session_management',
        'function_execution_tracking',
    ],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def health_get_queue_functions():
    """
    Get Functions Queue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/health/queue/logs',
    description=""" Get the number of logs that are waiting to be processed in the Appwrite internal queue server. """,
    tags=[
        'user_account_management',
        'individual_session_management',
        'session_handling',
    ],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def health_get_queue_logs():
    """
    Get Logs Queue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/health/queue/tasks',
    description=""" Get the number of tasks that are waiting to be processed in the Appwrite internal queue server. """,
    tags=['session_handling', 'individual_session_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def health_get_queue_tasks():
    """
    Get Tasks Queue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/health/queue/usage',
    description=""" Get the number of usage stats that are waiting to be processed in the Appwrite internal queue server. """,
    tags=['account_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def health_get_queue_usage():
    """
    Get Usage Queue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/health/queue/webhooks',
    description=""" Get the number of webhooks that are waiting to be processed in the Appwrite internal queue server. """,
    tags=['user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def health_get_queue_webhooks():
    """
    Get Webhooks Queue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/health/storage/local',
    description=""" Check the Appwrite local storage device is up and connection is successful. """,
    tags=['session_handling', 'individual_session_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def health_get_storage_local():
    """
    Get Local Storage
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/health/time',
    description=""" Check the Appwrite server time is synced with Google remote NTP server. We use this technology to smoothly handle leap seconds with no disruptive events. The [Network Time Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) (NTP) is used by hundreds of millions of computers and devices to synchronize their clocks over the Internet. If your computer sets its own clock, it likely uses NTP. """,
    tags=['locale_data_access', 'locale_details_provision'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def health_get_time():
    """
    Get Time
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/locale',
    description=""" Get the current user location based on IP. Returns an object with user country code, country name, continent name, continent code, ip address and suggested currency. You can use the locale header to get the data in a supported language.

([IP Geolocation by DB-IP](https://db-ip.com)) """,
    tags=['locale_data_access', 'locale_details_provision', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def locale_get():
    """
    Get User Locale
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/locale/continents',
    description=""" List of all continents. You can use the locale header to get the data in a supported language. """,
    tags=['locale_data_access', 'locale_details_provision'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def locale_get_continents():
    """
    List Continents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/locale/countries',
    description=""" List of all countries. You can use the locale header to get the data in a supported language. """,
    tags=['locale_data_access', 'locale_details_provision'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def locale_get_countries():
    """
    List Countries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/locale/countries/eu',
    description=""" List of all countries that are currently members of the EU. You can use the locale header to get the data in a supported language. """,
    tags=['locale_data_access', 'locale_details_provision'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def locale_get_countries_e_u():
    """
    List EU Countries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/locale/countries/phones',
    description=""" List of all countries phone codes. You can use the locale header to get the data in a supported language. """,
    tags=['locale_data_access', 'locale_details_provision'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def locale_get_countries_phones():
    """
    List Countries Phone Codes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/locale/currencies',
    description=""" List of all currencies, including currency symbol, name, plural, and decimal digits for all major and minor currencies. You can use the locale header to get the data in a supported language. """,
    tags=['locale_details_provision'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def locale_get_currencies():
    """
    List Currencies
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/locale/languages',
    description=""" List of all languages classified by ISO 639-1 including 2-letter code, name in English, and name in the respective language. """,
    tags=['locale_details_provision'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def locale_get_languages():
    """
    List Languages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/storage/files',
    description=""" Get a list of all the user files. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's files. [Learn more about different API modes](/docs/admin). """,
    tags=['file_management_operations', 'document_crud_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def storage_list_files(
    search: Optional[str] = '',
    limit: Optional[int] = 25,
    offset: Optional[int] = 0,
    order_type: Optional[str] = Query('ASC', alias='orderType'),
):
    """
    List Files
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/storage/files',
    description=""" Create a new file. The user who creates the file will automatically be assigned to read and write access unless he has passed custom values for read and write arguments. """,
    tags=['file_management_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def storage_create_file(file: UploadFile):
    """
    Create File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/storage/files/{fileId}',
    description=""" Delete a file by its unique ID. Only users with write permissions have access to delete this resource. """,
    tags=['file_management_operations', 'document_crud_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def storage_delete_file(file_id: str = Path(..., alias='fileId')):
    """
    Delete File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/storage/files/{fileId}',
    description=""" Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata. """,
    tags=['file_management_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def storage_get_file(file_id: str = Path(..., alias='fileId')):
    """
    Get File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/storage/files/{fileId}',
    description=""" Update a file by its unique ID. Only users with write permissions have access to update this resource. """,
    tags=['file_management_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def storage_update_file(
    file_id: str = Path(..., alias='fileId'), body: StorageFilesFileIdPutRequest = None
):
    """
    Update File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/storage/files/{fileId}/download',
    description=""" Get a file content by its unique ID. The endpoint response return with a 'Content-Disposition: attachment' header that tells the browser to start downloading the file to user downloads directory. """,
    tags=['file_management_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def storage_get_file_download(file_id: str = Path(..., alias='fileId')):
    """
    Get File for Download
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/storage/files/{fileId}/preview',
    description=""" Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image. """,
    tags=['file_management_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def storage_get_file_preview(
    file_id: str = Path(..., alias='fileId'),
    width: Optional[int] = 0,
    height: Optional[int] = 0,
    gravity: Optional[str] = 'center',
    quality: Optional[int] = 100,
    border_width: Optional[int] = Query(0, alias='borderWidth'),
    border_color: Optional[str] = Query('', alias='borderColor'),
    border_radius: Optional[int] = Query(0, alias='borderRadius'),
    opacity: Optional[float] = 1,
    rotation: Optional[int] = 0,
    background: Optional[str] = '',
    output: Optional[str] = '',
):
    """
    Get File Preview
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/storage/files/{fileId}/view',
    description=""" Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  'Content-Disposition: attachment' header. """,
    tags=['file_management_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def storage_get_file_view(file_id: str = Path(..., alias='fileId')):
    """
    Get File for View
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams',
    description=""" Get a list of all the current user teams. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's teams. [Learn more about different API modes](/docs/admin). """,
    tags=['team_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def teams_list(
    search: Optional[str] = '',
    limit: Optional[int] = 25,
    offset: Optional[int] = 0,
    order_type: Optional[str] = Query('ASC', alias='orderType'),
):
    """
    List Teams
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/teams',
    description=""" Create a new team. The user who creates the team will automatically be assigned as the owner of the team. The team owner can invite new members, who will be able add new owners and update or delete the team from your project. """,
    tags=['team_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def teams_create(body: TeamsPostRequest = None):
    """
    Create Team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/teams/{teamId}',
    description=""" Delete a team by its unique ID. Only team owners have write access for this resource. """,
    tags=['team_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def teams_delete(team_id: str = Path(..., alias='teamId')):
    """
    Delete Team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{teamId}',
    description=""" Get a team by its unique ID. All team members have read access for this resource. """,
    tags=['team_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def teams_get(team_id: str = Path(..., alias='teamId')):
    """
    Get Team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/teams/{teamId}',
    description=""" Update a team by its unique ID. Only team owners have write access for this resource. """,
    tags=['team_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def teams_update(
    team_id: str = Path(..., alias='teamId'), body: TeamsTeamIdPutRequest = None
):
    """
    Update Team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/teams/{teamId}/memberships',
    description=""" Get a team members by the team unique ID. All team members have read access for this list of resources. """,
    tags=['team_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def teams_get_memberships(
    team_id: str = Path(..., alias='teamId'),
    search: Optional[str] = '',
    limit: Optional[int] = 25,
    offset: Optional[int] = 0,
    order_type: Optional[str] = Query('ASC', alias='orderType'),
):
    """
    Get Team Memberships
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/teams/{teamId}/memberships',
    description=""" Use this endpoint to invite a new member to join your team. If initiated from Client SDK, an email with a link to join the team will be sent to the new member's email address if the member doesn't exist in the project it will be created automatically. If initiated from server side SDKs, new member will automatically be added to the team.

Use the 'URL' parameter to redirect the user from the invitation email back to your app. When the user is redirected, use the [Update Team Membership Status](/docs/client/teams#teamsUpdateMembershipStatus) endpoint to allow the user to accept the invitation to the team.  While calling from side SDKs the redirect url can be empty string.

Please note that in order to avoid a [Redirect Attacks](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URL's are the once from domains you have set when added your platforms in the console interface. """,
    tags=['team_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def teams_create_membership(
    team_id: str = Path(..., alias='teamId'),
    body: TeamsTeamIdMembershipsPostRequest = None,
):
    """
    Create Team Membership
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/teams/{teamId}/memberships/{membershipId}',
    description=""" This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted. """,
    tags=['team_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def teams_delete_membership(
    team_id: str = Path(..., alias='teamId'),
    membership_id: str = Path(..., alias='membershipId'),
):
    """
    Delete Team Membership
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/teams/{teamId}/memberships/{membershipId}',
    tags=['team_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def teams_update_membership_roles(
    team_id: str = Path(..., alias='teamId'),
    membership_id: str = Path(..., alias='membershipId'),
    body: TeamsTeamIdMembershipsMembershipIdPatchRequest = None,
):
    """
    Update Membership Roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/teams/{teamId}/memberships/{membershipId}/status',
    description=""" Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email recieved by the user. """,
    tags=['team_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-JWT"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def teams_update_membership_status(
    team_id: str = Path(..., alias='teamId'),
    membership_id: str = Path(..., alias='membershipId'),
    body: TeamsTeamIdMembershipsMembershipIdStatusPatchRequest = None,
):
    """
    Update Team Membership Status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users',
    description=""" Get a list of all the project's users. You can use the query params to filter your results. """,
    tags=['user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def users_list(
    search: Optional[str] = '',
    limit: Optional[int] = 25,
    offset: Optional[int] = 0,
    order_type: Optional[str] = Query('ASC', alias='orderType'),
):
    """
    List Users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users',
    description=""" Create a new user. """,
    tags=['account_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def users_create(body: UsersPostRequest = None):
    """
    Create User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{userId}',
    description=""" Delete a user by its unique ID. """,
    tags=['account_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def users_delete(user_id: str = Path(..., alias='userId')):
    """
    Delete User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{userId}',
    description=""" Get a user by its unique ID. """,
    tags=['account_operations', 'user_account_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def users_get(user_id: str = Path(..., alias='userId')):
    """
    Get User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{userId}/logs',
    description=""" Get a user activity logs list by its unique ID. """,
    tags=['user_account_management', 'session_handling'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def users_get_logs(user_id: str = Path(..., alias='userId')):
    """
    Get User Logs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{userId}/prefs',
    description=""" Get the user preferences by its unique ID. """,
    tags=['user_account_management', 'account_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def users_get_prefs(user_id: str = Path(..., alias='userId')):
    """
    Get User Preferences
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/users/{userId}/prefs',
    description=""" Update the user preferences by its unique ID. You can pass only the specific settings you wish to update. """,
    tags=['user_account_management', 'account_operations'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def users_update_prefs(
    user_id: str = Path(..., alias='userId'), body: UsersUserIdPrefsPatchRequest = None
):
    """
    Update User Preferences
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{userId}/sessions',
    description=""" Delete all user's sessions by using the user's unique ID. """,
    tags=['session_handling', 'individual_session_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def users_delete_sessions(user_id: str = Path(..., alias='userId')):
    """
    Delete User Sessions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{userId}/sessions',
    description=""" Get the user sessions list by its unique ID. """,
    tags=['session_handling', 'individual_session_management'],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def users_get_sessions(user_id: str = Path(..., alias='userId')):
    """
    Get User Sessions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{userId}/sessions/{sessionId}',
    description=""" Delete a user sessions by its unique ID. """,
    tags=[
        'session_handling',
        'individual_session_management',
        'user_account_management',
    ],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def users_delete_session(
    user_id: str = Path(..., alias='userId'),
    session_id: str = Path(..., alias='sessionId'),
):
    """
    Delete User Session
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/users/{userId}/status',
    description=""" Update the user status by its unique ID. """,
    tags=[
        'account_operations',
        'user_account_management',
        'user_verification_status_management',
    ],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def users_update_status(
    user_id: str = Path(..., alias='userId'), body: UsersUserIdStatusPatchRequest = None
):
    """
    Update User Status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/users/{userId}/verification',
    description=""" Update the user email verification status by its unique ID. """,
    tags=[
        'user_verification_status_management',
        'account_operations',
        'user_account_management',
    ],
    security=[
        APIKeyHeader(name="X-Appwrite-Key"),
        APIKeyHeader(name="X-Appwrite-Project"),
    ],
)
def users_update_verification(
    user_id: str = Path(..., alias='userId'),
    body: UsersUserIdVerificationPatchRequest = None,
):
    """
    Update Email Verification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
